/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateFollowInput: { // input type
    followeeId: number; // Int!
    followerId: number; // Int!
  }
  CreateLikeInput: { // input type
    profileId: number; // Int!
    publishId: number; // Int!
  }
  CreateProfileInput: { // input type
    handle: string; // String!
    imageURI?: string | null; // String
  }
  CreatePublishInput: { // input type
    contentURI: string; // String!
    creatorId: number; // Int!
    description: string; // String!
    imageURI: string; // String!
    metadataURI: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
  }
  HasRoleInput: { // input type
    role: NexusGenEnums['Role']; // Role!
  }
  UpdateProfileImageInput: { // input type
    imageURI: string; // String!
    profileId: number; // Int!
  }
  UpdatePublishInput: { // input type
    contentURI: string; // String!
    creatorId: number; // Int!
    description: string; // String!
    imageURI: string; // String!
    metadataURI: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    publishId: number; // Int!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
  }
}

export interface NexusGenEnums {
  AccountType: "traditional" | "wallet"
  Category: "Animals" | "Children" | "Education" | "Empty" | "Entertainment" | "Food" | "Gaming" | "LifeStyle" | "Men" | "Movies" | "Music" | "News" | "NotExist" | "Other" | "Programming" | "Science" | "Sports" | "Technology" | "Travel" | "Vehicles" | "Women"
  Role: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "UPGRADER_ROLE"
  UploadType: "avatar" | "post"
  WebHookEventCategory: "external" | "internal" | "token"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Account: { // root type
    address: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    type: NexusGenEnums['AccountType']; // AccountType!
    updatedAt?: string | null; // String
  }
  AddressActivity: { // root type
    event: NexusGenEnums['WebHookEventCategory']; // WebHookEventCategory!
    fromAddress: string; // String!
    id: string; // ID!
    isAcknowledged: boolean; // Boolean!
    toAddress: string; // String!
    value?: number | null; // Float
  }
  BurnNFTResult: { // root type
    status: number; // Int!
  }
  CreateFollowResult: { // root type
    followeeId: number; // Int!
    followerId: number; // Int!
    owner: string; // String!
    tokenId: number; // Int!
  }
  CreateLikeResult: { // root type
    owner: string; // String!
    profileId: number; // Int!
    pulbishId: number; // Int!
    tokenId: number; // Int!
  }
  CreateProfileResult: { // root type
    handle: string; // String!
    imageURI: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
  }
  CreatePublishResult: { // root type
    contentURI: string; // String!
    creatorId: number; // Int!
    description: string; // String!
    imageURI: string; // String!
    likes: number; // Int!
    metadataURI: string; // String!
    owner: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: number; // Int!
  }
  CreateWalletResult: { // root type
    address: string; // String!
  }
  EstimateCreateNFTGasResult: { // root type
    gas: string; // String!
  }
  FetchPublishResult: { // root type
    contentURI: string; // String!
    creatorId: number; // Int!
    imageURI: string; // String!
    likes: number; // Int!
    metadataURI: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
  }
  FollowToken: { // root type
    createdAt: string; // String!
    followeeId: number; // Int!
    followerId: number; // Int!
    id: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt?: string | null; // String
  }
  GetAccount: { // root type
    account?: NexusGenRootTypes['Account'] | null; // Account
  }
  LikeToken: { // root type
    createdAt: string; // String!
    id: string; // String!
    owner: string; // String!
    profileId: number; // Int!
    publishId: number; // Int!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt?: string | null; // String
  }
  MetadataCustomProps: { // root type
    contentURI?: string | null; // String
    handle: string; // String!
    owner: string; // String!
    storagePath?: string | null; // String
    storageURL: string; // String!
    type: NexusGenEnums['UploadType']; // UploadType!
  }
  Mutation: {};
  ProfileToken: { // root type
    createdAt: string; // String!
    displayedHandle: string; // String!
    handle: string; // String!
    id: string; // String!
    imageURI: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt?: string | null; // String
  }
  PublishToken: { // root type
    contentURI: string; // String!
    createdAt: string; // String!
    creatorId: number; // Int!
    description: string; // String!
    id: string; // String!
    imageURI: string; // String!
    likes: number; // Int!
    metadataURI: string; // String!
    owner: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt?: string | null; // String
  }
  Query: {};
  UploadParams: { // root type
    address: string; // String!
    fileName: string; // String!
    handle: string; // String!
    mime: string; // String!
    uploadType: NexusGenEnums['UploadType']; // UploadType!
    userId: string; // String!
  }
  UploadReturnType: { // root type
    cid: string; // String!
    storagePath: string; // String!
    storageURL: string; // String!
    tokenURI: string; // String!
  }
  Wallet: { // root type
    address: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    key: string; // String!
    updatedAt?: string | null; // String
  }
  WebHookAddressActivity: { // root type
    asset: string; // String!
    category: NexusGenEnums['WebHookEventCategory']; // WebHookEventCategory!
    erc721TokenId?: string | null; // String
    fromAddress: string; // String!
    hash: string; // String!
    rawContract: NexusGenRootTypes['WebHookRawContract']; // WebHookRawContract!
    toAddress: string; // String!
    value?: number | null; // Float
  }
  WebHookEvent: { // root type
    activity: NexusGenRootTypes['WebHookAddressActivity'][]; // [WebHookAddressActivity!]!
    network: string; // String!
  }
  WebHookRawContract: { // root type
    address?: string | null; // String
    decimal?: number | null; // Int
    rawValue?: string | null; // String
  }
  WebHookRequestBody: { // root type
    createdAt: string; // String!
    event: NexusGenRootTypes['WebHookEvent']; // WebHookEvent!
    id: string; // String!
    type: string; // String!
    webhookId: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    address: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    type: NexusGenEnums['AccountType']; // AccountType!
    updatedAt: string | null; // String
  }
  AddressActivity: { // field return type
    event: NexusGenEnums['WebHookEventCategory']; // WebHookEventCategory!
    fromAddress: string; // String!
    id: string; // ID!
    isAcknowledged: boolean; // Boolean!
    toAddress: string; // String!
    value: number | null; // Float
  }
  BurnNFTResult: { // field return type
    status: number; // Int!
  }
  CreateFollowResult: { // field return type
    followeeId: number; // Int!
    followerId: number; // Int!
    owner: string; // String!
    tokenId: number; // Int!
  }
  CreateLikeResult: { // field return type
    owner: string; // String!
    profileId: number; // Int!
    pulbishId: number; // Int!
    tokenId: number; // Int!
  }
  CreateProfileResult: { // field return type
    handle: string; // String!
    imageURI: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
  }
  CreatePublishResult: { // field return type
    contentURI: string; // String!
    creatorId: number; // Int!
    description: string; // String!
    imageURI: string; // String!
    likes: number; // Int!
    metadataURI: string; // String!
    owner: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: number; // Int!
  }
  CreateWalletResult: { // field return type
    address: string; // String!
  }
  EstimateCreateNFTGasResult: { // field return type
    gas: string; // String!
  }
  FetchPublishResult: { // field return type
    contentURI: string; // String!
    creatorId: number; // Int!
    imageURI: string; // String!
    likes: number; // Int!
    metadataURI: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
  }
  FollowToken: { // field return type
    createdAt: string; // String!
    followeeId: number; // Int!
    followerId: number; // Int!
    id: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt: string | null; // String
  }
  GetAccount: { // field return type
    account: NexusGenRootTypes['Account'] | null; // Account
  }
  LikeToken: { // field return type
    createdAt: string; // String!
    id: string; // String!
    owner: string; // String!
    profileId: number; // Int!
    publishId: number; // Int!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt: string | null; // String
  }
  MetadataCustomProps: { // field return type
    contentURI: string | null; // String
    handle: string; // String!
    owner: string; // String!
    storagePath: string | null; // String
    storageURL: string; // String!
    type: NexusGenEnums['UploadType']; // UploadType!
  }
  Mutation: { // field return type
    burnPublishNft: NexusGenRootTypes['BurnNFTResult']; // BurnNFTResult!
    createProfileNft: NexusGenRootTypes['CreateProfileResult']; // CreateProfileResult!
    createPublishNft: NexusGenRootTypes['CreatePublishResult']; // CreatePublishResult!
    createWallet: NexusGenRootTypes['CreateWalletResult']; // CreateWalletResult!
    estimateCreateFollowGas: NexusGenRootTypes['EstimateCreateNFTGasResult']; // EstimateCreateNFTGasResult!
    estimateCreateLikeGas: NexusGenRootTypes['EstimateCreateNFTGasResult']; // EstimateCreateNFTGasResult!
    estimateCreateProfileGas: NexusGenRootTypes['EstimateCreateNFTGasResult']; // EstimateCreateNFTGasResult!
    estimateCreatePublishGas: NexusGenRootTypes['EstimateCreateNFTGasResult']; // EstimateCreateNFTGasResult!
    follow: NexusGenRootTypes['CreateFollowResult']; // CreateFollowResult!
    hasRoleFollow: boolean; // Boolean!
    hasRoleLike: boolean; // Boolean!
    hasRoleProfile: boolean; // Boolean!
    hasRolePublish: boolean; // Boolean!
    like: NexusGenRootTypes['CreateLikeResult']; // CreateLikeResult!
    setDefaultProfile: NexusGenRootTypes['CreateProfileResult']; // CreateProfileResult!
    setLikeContractForPublish: string; // String!
    setLikeFee: string; // String!
    setOwnerAddress: string; // String!
    setPlatformFee: string; // String!
    setProfileContractForFollow: string; // String!
    setProfileContractForLike: string; // String!
    setProfileContractForPublish: string; // String!
    setPublishContractForLike: string; // String!
    unFollow: NexusGenRootTypes['BurnNFTResult']; // BurnNFTResult!
    unLike: NexusGenRootTypes['BurnNFTResult']; // BurnNFTResult!
    updateProfileImage: NexusGenRootTypes['CreateProfileResult']; // CreateProfileResult!
    updatePublishNft: NexusGenRootTypes['CreatePublishResult']; // CreatePublishResult!
    validateHandle: boolean; // Boolean!
    withdrawFunds: string; // String!
  }
  ProfileToken: { // field return type
    createdAt: string; // String!
    displayedHandle: string; // String!
    handle: string; // String!
    id: string; // String!
    imageURI: string; // String!
    owner: string; // String!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt: string | null; // String
  }
  PublishToken: { // field return type
    contentURI: string; // String!
    createdAt: string; // String!
    creatorId: number; // Int!
    description: string; // String!
    id: string; // String!
    imageURI: string; // String!
    likes: number; // Int!
    metadataURI: string; // String!
    owner: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: number; // Int!
    uid: string; // String!
    updatedAt: string | null; // String
  }
  Query: { // field return type
    fetchFollowers: Array<NexusGenRootTypes['CreateFollowResult'] | null>; // [CreateFollowResult]!
    getContractAddress: string; // String!
    getContractBalance: number; // Float!
    getDefaultProfile: NexusGenRootTypes['CreateProfileResult'] | null; // CreateProfileResult
    getFollowersCount: number; // Int!
    getFollowingCount: number; // Int!
    getLikeFee: number; // Int!
    getMyBalance: string; // String!
    getMyPublishes: Array<NexusGenRootTypes['FetchPublishResult'] | null>; // [FetchPublishResult]!
    getPlatformFee: number; // Int!
    getPublish: NexusGenRootTypes['FetchPublishResult']; // FetchPublishResult!
    getPublishes: Array<NexusGenRootTypes['FetchPublishResult'] | null>; // [FetchPublishResult]!
    totalPublishes: number; // Int!
  }
  UploadParams: { // field return type
    address: string; // String!
    fileName: string; // String!
    handle: string; // String!
    mime: string; // String!
    uploadType: NexusGenEnums['UploadType']; // UploadType!
    userId: string; // String!
  }
  UploadReturnType: { // field return type
    cid: string; // String!
    storagePath: string; // String!
    storageURL: string; // String!
    tokenURI: string; // String!
  }
  Wallet: { // field return type
    address: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    key: string; // String!
    updatedAt: string | null; // String
  }
  WebHookAddressActivity: { // field return type
    asset: string; // String!
    category: NexusGenEnums['WebHookEventCategory']; // WebHookEventCategory!
    erc721TokenId: string | null; // String
    fromAddress: string; // String!
    hash: string; // String!
    rawContract: NexusGenRootTypes['WebHookRawContract']; // WebHookRawContract!
    toAddress: string; // String!
    value: number | null; // Float
  }
  WebHookEvent: { // field return type
    activity: NexusGenRootTypes['WebHookAddressActivity'][]; // [WebHookAddressActivity!]!
    network: string; // String!
  }
  WebHookRawContract: { // field return type
    address: string | null; // String
    decimal: number | null; // Int
    rawValue: string | null; // String
  }
  WebHookRequestBody: { // field return type
    createdAt: string; // String!
    event: NexusGenRootTypes['WebHookEvent']; // WebHookEvent!
    id: string; // String!
    type: string; // String!
    webhookId: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    address: 'String'
    createdAt: 'String'
    id: 'ID'
    type: 'AccountType'
    updatedAt: 'String'
  }
  AddressActivity: { // field return type name
    event: 'WebHookEventCategory'
    fromAddress: 'String'
    id: 'ID'
    isAcknowledged: 'Boolean'
    toAddress: 'String'
    value: 'Float'
  }
  BurnNFTResult: { // field return type name
    status: 'Int'
  }
  CreateFollowResult: { // field return type name
    followeeId: 'Int'
    followerId: 'Int'
    owner: 'String'
    tokenId: 'Int'
  }
  CreateLikeResult: { // field return type name
    owner: 'String'
    profileId: 'Int'
    pulbishId: 'Int'
    tokenId: 'Int'
  }
  CreateProfileResult: { // field return type name
    handle: 'String'
    imageURI: 'String'
    owner: 'String'
    tokenId: 'Int'
  }
  CreatePublishResult: { // field return type name
    contentURI: 'String'
    creatorId: 'Int'
    description: 'String'
    imageURI: 'String'
    likes: 'Int'
    metadataURI: 'String'
    owner: 'String'
    primaryCategory: 'Category'
    secondaryCategory: 'Category'
    tertiaryCategory: 'Category'
    title: 'String'
    tokenId: 'Int'
  }
  CreateWalletResult: { // field return type name
    address: 'String'
  }
  EstimateCreateNFTGasResult: { // field return type name
    gas: 'String'
  }
  FetchPublishResult: { // field return type name
    contentURI: 'String'
    creatorId: 'Int'
    imageURI: 'String'
    likes: 'Int'
    metadataURI: 'String'
    owner: 'String'
    tokenId: 'Int'
  }
  FollowToken: { // field return type name
    createdAt: 'String'
    followeeId: 'Int'
    followerId: 'Int'
    id: 'String'
    owner: 'String'
    tokenId: 'Int'
    uid: 'String'
    updatedAt: 'String'
  }
  GetAccount: { // field return type name
    account: 'Account'
  }
  LikeToken: { // field return type name
    createdAt: 'String'
    id: 'String'
    owner: 'String'
    profileId: 'Int'
    publishId: 'Int'
    tokenId: 'Int'
    uid: 'String'
    updatedAt: 'String'
  }
  MetadataCustomProps: { // field return type name
    contentURI: 'String'
    handle: 'String'
    owner: 'String'
    storagePath: 'String'
    storageURL: 'String'
    type: 'UploadType'
  }
  Mutation: { // field return type name
    burnPublishNft: 'BurnNFTResult'
    createProfileNft: 'CreateProfileResult'
    createPublishNft: 'CreatePublishResult'
    createWallet: 'CreateWalletResult'
    estimateCreateFollowGas: 'EstimateCreateNFTGasResult'
    estimateCreateLikeGas: 'EstimateCreateNFTGasResult'
    estimateCreateProfileGas: 'EstimateCreateNFTGasResult'
    estimateCreatePublishGas: 'EstimateCreateNFTGasResult'
    follow: 'CreateFollowResult'
    hasRoleFollow: 'Boolean'
    hasRoleLike: 'Boolean'
    hasRoleProfile: 'Boolean'
    hasRolePublish: 'Boolean'
    like: 'CreateLikeResult'
    setDefaultProfile: 'CreateProfileResult'
    setLikeContractForPublish: 'String'
    setLikeFee: 'String'
    setOwnerAddress: 'String'
    setPlatformFee: 'String'
    setProfileContractForFollow: 'String'
    setProfileContractForLike: 'String'
    setProfileContractForPublish: 'String'
    setPublishContractForLike: 'String'
    unFollow: 'BurnNFTResult'
    unLike: 'BurnNFTResult'
    updateProfileImage: 'CreateProfileResult'
    updatePublishNft: 'CreatePublishResult'
    validateHandle: 'Boolean'
    withdrawFunds: 'String'
  }
  ProfileToken: { // field return type name
    createdAt: 'String'
    displayedHandle: 'String'
    handle: 'String'
    id: 'String'
    imageURI: 'String'
    owner: 'String'
    tokenId: 'Int'
    uid: 'String'
    updatedAt: 'String'
  }
  PublishToken: { // field return type name
    contentURI: 'String'
    createdAt: 'String'
    creatorId: 'Int'
    description: 'String'
    id: 'String'
    imageURI: 'String'
    likes: 'Int'
    metadataURI: 'String'
    owner: 'String'
    primaryCategory: 'Category'
    secondaryCategory: 'Category'
    tertiaryCategory: 'Category'
    title: 'String'
    tokenId: 'Int'
    uid: 'String'
    updatedAt: 'String'
  }
  Query: { // field return type name
    fetchFollowers: 'CreateFollowResult'
    getContractAddress: 'String'
    getContractBalance: 'Float'
    getDefaultProfile: 'CreateProfileResult'
    getFollowersCount: 'Int'
    getFollowingCount: 'Int'
    getLikeFee: 'Int'
    getMyBalance: 'String'
    getMyPublishes: 'FetchPublishResult'
    getPlatformFee: 'Int'
    getPublish: 'FetchPublishResult'
    getPublishes: 'FetchPublishResult'
    totalPublishes: 'Int'
  }
  UploadParams: { // field return type name
    address: 'String'
    fileName: 'String'
    handle: 'String'
    mime: 'String'
    uploadType: 'UploadType'
    userId: 'String'
  }
  UploadReturnType: { // field return type name
    cid: 'String'
    storagePath: 'String'
    storageURL: 'String'
    tokenURI: 'String'
  }
  Wallet: { // field return type name
    address: 'String'
    createdAt: 'String'
    id: 'ID'
    key: 'String'
    updatedAt: 'String'
  }
  WebHookAddressActivity: { // field return type name
    asset: 'String'
    category: 'WebHookEventCategory'
    erc721TokenId: 'String'
    fromAddress: 'String'
    hash: 'String'
    rawContract: 'WebHookRawContract'
    toAddress: 'String'
    value: 'Float'
  }
  WebHookEvent: { // field return type name
    activity: 'WebHookAddressActivity'
    network: 'String'
  }
  WebHookRawContract: { // field return type name
    address: 'String'
    decimal: 'Int'
    rawValue: 'String'
  }
  WebHookRequestBody: { // field return type name
    createdAt: 'String'
    event: 'WebHookEvent'
    id: 'String'
    type: 'String'
    webhookId: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    burnPublishNft: { // args
      publishId: number; // Int!
    }
    createProfileNft: { // args
      input: NexusGenInputs['CreateProfileInput']; // CreateProfileInput!
    }
    createPublishNft: { // args
      input: NexusGenInputs['CreatePublishInput']; // CreatePublishInput!
    }
    estimateCreateFollowGas: { // args
      input: NexusGenInputs['CreateFollowInput']; // CreateFollowInput!
    }
    estimateCreateLikeGas: { // args
      input: NexusGenInputs['CreateLikeInput']; // CreateLikeInput!
    }
    estimateCreateProfileGas: { // args
      input: NexusGenInputs['CreateProfileInput']; // CreateProfileInput!
    }
    estimateCreatePublishGas: { // args
      input: NexusGenInputs['CreatePublishInput']; // CreatePublishInput!
    }
    follow: { // args
      input: NexusGenInputs['CreateFollowInput']; // CreateFollowInput!
    }
    hasRoleFollow: { // args
      data: NexusGenInputs['HasRoleInput']; // HasRoleInput!
    }
    hasRoleLike: { // args
      data: NexusGenInputs['HasRoleInput']; // HasRoleInput!
    }
    hasRoleProfile: { // args
      data: NexusGenInputs['HasRoleInput']; // HasRoleInput!
    }
    hasRolePublish: { // args
      data: NexusGenInputs['HasRoleInput']; // HasRoleInput!
    }
    like: { // args
      input: NexusGenInputs['CreateLikeInput']; // CreateLikeInput!
    }
    setDefaultProfile: { // args
      profileId: number; // Int!
    }
    setLikeContractForPublish: { // args
      likeContractAddress: string; // String!
    }
    setLikeFee: { // args
      fee: number; // Float!
    }
    setOwnerAddress: { // args
      ownerAddress: string; // String!
    }
    setPlatformFee: { // args
      fee: number; // Float!
    }
    setProfileContractForFollow: { // args
      profileContractAddress: string; // String!
    }
    setProfileContractForLike: { // args
      profileContractAddress: string; // String!
    }
    setProfileContractForPublish: { // args
      profileContractAddress: string; // String!
    }
    setPublishContractForLike: { // args
      publishContractAddress: string; // String!
    }
    unFollow: { // args
      tokenId: number; // Int!
    }
    unLike: { // args
      tokenId: number; // Int!
    }
    updateProfileImage: { // args
      input: NexusGenInputs['UpdateProfileImageInput']; // UpdateProfileImageInput!
    }
    updatePublishNft: { // args
      input: NexusGenInputs['UpdatePublishInput']; // UpdatePublishInput!
    }
    validateHandle: { // args
      handle: string; // String!
    }
  }
  Query: {
    getFollowersCount: { // args
      profileId: number; // Int!
    }
    getFollowingCount: { // args
      profileId: number; // Int!
    }
    getMyBalance: { // args
      address: string; // String!
    }
    getPublish: { // args
      publishId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}