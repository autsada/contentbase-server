### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  address: String!
  createdAt: String!
  id: ID!
  type: AccountType!
  updatedAt: String
}

enum AccountType {
  traditional
  wallet
}

type AddressActivity {
  event: WebHookEventCategory!
  fromAddress: String!
  id: ID!
  isAcknowledged: Boolean!
  toAddress: String!
  value: Float
}

input CreateProfileInput {
  handle: String!
  imageURI: String
  tokenURI: String!
}

input CreatePublishInput {
  contentURI: String!
  imageURI: String!
  profileId: Int!
  tokenURI: String!
}

type CreateWalletResult {
  address: String!
}

type EstimateCreateProfileGasResult {
  gas: String!
}

type GetAccount {
  account: Account
}

input HasRoleInput {
  role: Role!
}

type MetadataCustomProps {
  contentURI: String
  handle: String!
  owner: String!
  storagePath: String
  storageURL: String!
  type: UploadType!
}

type Mutation {
  burnToken(tokenId: Int!): String!
  createProfileNft(input: CreateProfileInput!): Token!
  createPublishNft(input: CreatePublishInput!): Token!
  createWallet: CreateWalletResult!
  estimateCreateProfileGas(input: CreateProfileInput!): EstimateCreateProfileGasResult!
  hasRole(data: HasRoleInput!): Boolean!
  setDefaultProfile(profileId: Int!): Int!
  updateProfileImage(input: UpdateProfileImageInput!): Token!
  updatePublishNft(input: UpdatePublishInput!): Token!
}

type Query {
  getDefaultProfile: Token!
  getMyBalance(address: String!): String!
  getMyProfiles: [Token]!
  getMyPublishes: [Token]!
  getProfile(profileId: Int!): Token!
  getPublish(publishId: Int!): Token!
  getPublishes: [Token]!
  getTokensCount: Int!
  isHandleUnique(handle: String!): Boolean!
  tokenURI(tokenId: Int!): String!
}

enum Role {
  ADMIN_ROLE
  DEFAULT_ADMIN_ROLE
  UPGRADER_ROLE
}

type Token {
  associatedId: Int!
  contentURI: String!
  handle: String!
  imageURI: String!
  owner: String!
  tokenId: Int!
  tokenType: TokenType!
}

enum TokenType {
  Follow
  Like
  Profile
  Publish
}

input UpdateProfileImageInput {
  docId: String!
  imageURI: String
  profileId: Int!
  tokenURI: String!
}

input UpdatePublishInput {
  contentURI: String
  docId: String!
  imageURI: String
  publishId: Int!
  tokenURI: String!
}

type UploadParams {
  address: String!
  fileName: String!
  handle: String!
  mime: String!
  uploadType: UploadType!
  userId: String!
}

type UploadReturnType {
  cid: String!
  storagePath: String!
  storageURL: String!
  tokenURI: String!
}

enum UploadType {
  avatar
  post
}

type Wallet {
  address: String!
  createdAt: String!
  id: ID!
  key: String!
  updatedAt: String
}

type WebHookAddressActivity {
  asset: String!
  category: WebHookEventCategory!
  erc721TokenId: String
  fromAddress: String!
  hash: String!
  rawContract: WebHookRawContract!
  toAddress: String!
  value: Float
}

type WebHookEvent {
  activity: [WebHookAddressActivity!]!
  network: String!
}

enum WebHookEventCategory {
  external
  internal
  token
}

type WebHookRawContract {
  address: String
  decimal: Int
  rawValue: String
}

type WebHookRequestBody {
  createdAt: String!
  event: WebHookEvent!
  id: String!
  type: String!
  webhookId: String!
}