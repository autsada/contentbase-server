### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  address: String!
  createdAt: String!
  id: ID!
  type: AccountType!
  updatedAt: String
}

enum AccountType {
  traditional
  wallet
}

type AddressActivity {
  event: WebHookEventCategory!
  fromAddress: String!
  id: ID!
  isAcknowledged: Boolean!
  toAddress: String!
  value: Float
}

type BurnNFTResult {
  status: Int!
}

enum Category {
  Animals
  Children
  Education
  Empty
  Entertainment
  Food
  Gaming
  LifeStyle
  Men
  Movies
  Music
  News
  NotExist
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

input CreateFollowInput {
  followeeId: Int!
  followerId: Int!
}

type CreateFollowResult {
  followeeId: Int!
  followerId: Int!
  owner: String!
  tokenId: Int!
}

input CreateLikeInput {
  profileId: Int!
  publishId: Int!
}

type CreateLikeResult {
  owner: String!
  profileId: Int!
  pulbishId: Int!
  tokenId: Int!
}

input CreateProfileInput {
  handle: String!
  imageURI: String
}

type CreateProfileResult {
  handle: String!
  imageURI: String!
  owner: String!
  tokenId: Int!
}

input CreatePublishInput {
  contentURI: String!
  creatorId: Int!
  description: String!
  imageURI: String!
  metadataURI: String!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
}

type CreatePublishResult {
  contentURI: String!
  creatorId: Int!
  description: String!
  imageURI: String!
  likes: Int!
  metadataURI: String!
  owner: String!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
  tokenId: Int!
}

type CreateWalletResult {
  address: String!
}

type EstimateCreateNFTGasResult {
  gas: String!
}

type FetchPublishResult {
  contentURI: String!
  creatorId: Int!
  imageURI: String!
  likes: Int!
  metadataURI: String!
  owner: String!
  tokenId: Int!
}

type FollowToken {
  createdAt: String!
  followeeId: Int!
  followerId: Int!
  id: String!
  owner: String!
  tokenId: Int!
  uid: String!
  updatedAt: String
}

type GetAccount {
  account: Account
}

input HasRoleInput {
  role: Role!
}

type LikeToken {
  createdAt: String!
  id: String!
  owner: String!
  profileId: Int!
  publishId: Int!
  tokenId: Int!
  uid: String!
  updatedAt: String
}

type MetadataCustomProps {
  contentURI: String
  handle: String!
  owner: String!
  storagePath: String
  storageURL: String!
  type: UploadType!
}

type Mutation {
  burnPublishNft(publishId: Int!): BurnNFTResult!
  createProfileNft(input: CreateProfileInput!): CreateProfileResult!
  createPublishNft(input: CreatePublishInput!): CreatePublishResult!
  createWallet: CreateWalletResult!
  estimateCreateFollowGas(input: CreateFollowInput!): EstimateCreateNFTGasResult!
  estimateCreateLikeGas(input: CreateLikeInput!): EstimateCreateNFTGasResult!
  estimateCreateProfileGas(input: CreateProfileInput!): EstimateCreateNFTGasResult!
  estimateCreatePublishGas(input: CreatePublishInput!): EstimateCreateNFTGasResult!
  follow(input: CreateFollowInput!): CreateFollowResult!
  hasRoleFollow(data: HasRoleInput!): Boolean!
  hasRoleLike(data: HasRoleInput!): Boolean!
  hasRoleProfile(data: HasRoleInput!): Boolean!
  hasRolePublish(data: HasRoleInput!): Boolean!
  like(input: CreateLikeInput!): CreateLikeResult!
  setDefaultProfile(profileId: Int!): CreateProfileResult!
  setLikeContractForPublish(likeContractAddress: String!): String!
  setLikeFee(fee: Float!): String!
  setOwnerAddress(ownerAddress: String!): String!
  setPlatformFee(fee: Float!): String!
  setProfileContractForFollow(profileContractAddress: String!): String!
  setProfileContractForLike(profileContractAddress: String!): String!
  setProfileContractForPublish(profileContractAddress: String!): String!
  setPublishContractForLike(publishContractAddress: String!): String!
  unFollow(tokenId: Int!): BurnNFTResult!
  unLike(tokenId: Int!): BurnNFTResult!
  updateProfileImage(input: UpdateProfileImageInput!): CreateProfileResult!
  updatePublishNft(input: UpdatePublishInput!): CreatePublishResult!
  validateHandle(handle: String!): Boolean!
  withdrawFunds: String!
}

type ProfileToken {
  createdAt: String!
  displayedHandle: String!
  handle: String!
  id: String!
  imageURI: String!
  owner: String!
  tokenId: Int!
  uid: String!
  updatedAt: String
}

type PublishToken {
  contentURI: String!
  createdAt: String!
  creatorId: Int!
  description: String!
  id: String!
  imageURI: String!
  likes: Int!
  metadataURI: String!
  owner: String!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
  tokenId: Int!
  uid: String!
  updatedAt: String
}

type Query {
  fetchFollowers: [CreateFollowResult]!
  getContractAddress: String!
  getContractBalance: Float!
  getDefaultProfile: CreateProfileResult
  getFollowersCount(profileId: Int!): Int!
  getFollowingCount(profileId: Int!): Int!
  getLikeFee: Int!
  getMyBalance(address: String!): String!
  getMyPublishes: [FetchPublishResult]!
  getPlatformFee: Int!
  getPublish(publishId: Int!): FetchPublishResult!
  getPublishes: [FetchPublishResult]!
  totalPublishes: Int!
}

enum Role {
  ADMIN_ROLE
  DEFAULT_ADMIN_ROLE
  UPGRADER_ROLE
}

input UpdateProfileImageInput {
  imageURI: String!
  profileId: Int!
}

input UpdatePublishInput {
  contentURI: String!
  creatorId: Int!
  description: String!
  imageURI: String!
  metadataURI: String!
  primaryCategory: Category!
  publishId: Int!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
}

type UploadParams {
  address: String!
  fileName: String!
  handle: String!
  mime: String!
  uploadType: UploadType!
  userId: String!
}

type UploadReturnType {
  cid: String!
  storagePath: String!
  storageURL: String!
  tokenURI: String!
}

enum UploadType {
  avatar
  post
}

type Wallet {
  address: String!
  createdAt: String!
  id: ID!
  key: String!
  updatedAt: String
}

type WebHookAddressActivity {
  asset: String!
  category: WebHookEventCategory!
  erc721TokenId: String
  fromAddress: String!
  hash: String!
  rawContract: WebHookRawContract!
  toAddress: String!
  value: Float
}

type WebHookEvent {
  activity: [WebHookAddressActivity!]!
  network: String!
}

enum WebHookEventCategory {
  external
  internal
  token
}

type WebHookRawContract {
  address: String
  decimal: Int
  rawValue: String
}

type WebHookRequestBody {
  createdAt: String!
  event: WebHookEvent!
  id: String!
  type: String!
  webhookId: String!
}