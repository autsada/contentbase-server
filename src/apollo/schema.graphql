### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddressResult {
  address: String!
}

enum Category {
  Animals
  Children
  Education
  Empty
  Entertainment
  Food
  Gaming
  LifeStyle
  Men
  Movies
  Music
  News
  NotExist
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

type CommentToken {
  commentType: CommentType!
  creatorId: Int!
  owner: String!
  parentId: Int!
  text: String!
  tokenId: Int!
}

enum CommentType {
  COMMENT
  PUBLISH
}

input CreateCommentInput {
  creatorId: Int!
  parentId: Int!
  text: String!
}

input CreateProfileInput {
  handle: String!
  imageURI: String
}

input CreatePublishInput {
  contentURI: String!
  creatorId: Int!
  description: String!
  kind: PublishKind!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
}

type CreateWalletResult {
  address: String!
}

type EstimateGasResult {
  gas: String!
}

type FeeResult {
  fee: Float!
}

input FollowInput {
  followeeId: Int!
  followerId: Int!
}

type GetFollowsResult {
  followers: Int!
  following: Int!
}

input HasRoleInput {
  role: Role!
}

type MetadataCustomProps {
  contentURI: String
  handle: String!
  owner: String!
  storagePath: String
  storageURL: String!
  type: UploadType!
}

type Mutation {
  commentOnComment(input: CreateCommentInput!): WriteResult!
  commentOnPublish(input: CreateCommentInput!): WriteResult!
  createProfile(input: CreateProfileInput!): WriteResult!
  createPublish(input: CreatePublishInput!): WriteResult!
  createWallet: CreateWalletResult!
  deleteComment(commentId: Int!, creatorId: Int!): WriteResult!
  deletePublish(creatorId: Int!, publishId: Int!): WriteResult!
  disLikeComment(commentId: Int!, profileId: Int!): WriteResult!
  disLikePublish(profileId: Int!, publishId: Int!): WriteResult!
  estimateGasCreateProfile(input: CreateProfileInput!): EstimateGasResult!
  estimateGasCreatePublish(input: CreatePublishInput!): EstimateGasResult!
  estimateGasFollow(input: FollowInput!): EstimateGasResult!
  estimateGasLikePublish(profileId: Int!, publishId: Int!): EstimateGasResult!
  follow(input: FollowInput!): WriteResult!
  hasRoleFollow(data: HasRoleInput!): Boolean!
  hasRoleLike(data: HasRoleInput!): Boolean!
  hasRoleProfile(data: HasRoleInput!): Boolean!
  hasRolePublish(data: HasRoleInput!): Boolean!
  likeComment(commentId: Int!, profileId: Int!): WriteResult!
  likePublish(profileId: Int!, publishId: Int!): WriteResult!
  setDefaultProfile(handle: String!): WriteResult!
  setLikeFee(fee: Float!): WriteResult!
  setOwnerAddress(ownerAddress: String!): WriteResult!
  setPlatformFee(fee: Int!): WriteResult!
  setProfileForComment(contractAddress: String!): WriteResult!
  setProfileForFollow(contractAddress: String!): WriteResult!
  setProfileForLike(contractAddress: String!): WriteResult!
  setProfileForPublish(contractAddress: String!): WriteResult!
  setPublishForComment(contractAddress: String!): WriteResult!
  setPublishForLike(contractAddress: String!): WriteResult!
  updateComment(input: UpdateCommentInput!): WriteResult!
  updateProfileImage(input: UpdateProfileImageInput!): WriteResult!
  updatePublish(input: UpdatePublishInput!): WriteResult!
  validateHandle(handle: String!): Boolean!
  withdrawFunds: WriteResult!
}

type ProfileToken {
  handle: String!
  imageURI: String!
  owner: String!
  tokenId: Int!
}

enum PublishKind {
  Audio
  Blog
  Post
  Short
  Video
}

type PublishToken {
  contentURI: String!
  creatorId: Int!
  owner: String!
  tokenId: Int!
}

type Query {
  getComment(commentId: Int!): CommentToken!
  getDefaultProfile: ProfileToken
  getFollows(profileId: Int!): GetFollowsResult
  getLikeFee: FeeResult!
  getMyBalance(address: String!): String!
  getOwnerAddress: AddressResult!
  getPlatformFee: FeeResult!
  getProfileAddressFromComment: AddressResult!
  getProfileAddressFromLike: AddressResult!
  getProfileAddressFromPuiblish: AddressResult!
  getProfileImageURI(tokenId: Int!): TokenURIResult
  getPublish(publishId: Int!): PublishToken
  getPublishAddressFromComment: AddressResult!
  getPublishAddressFromLike: AddressResult!
  getPublishTokenURI(tokenId: Int!): TokenURIResult
}

enum Role {
  ADMIN_ROLE
  DEFAULT_ADMIN_ROLE
  UPGRADER_ROLE
}

type TokenURIResult {
  uri: String!
}

input UpdateCommentInput {
  contentURI: String!
  creatorId: Int!
  text: String!
  tokenId: Int!
}

input UpdateProfileImageInput {
  imageURI: String!
  tokenId: Int!
}

input UpdatePublishInput {
  contentURI: String!
  creatorId: Int!
  description: String
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
  tokenId: Int!
}

type UploadParams {
  address: String!
  fileName: String!
  handle: String!
  mime: String!
  uploadType: UploadType!
  userId: String!
}

type UploadReturnType {
  cid: String!
  storagePath: String!
  storageURL: String!
  tokenURI: String!
}

enum UploadType {
  avatar
  post
}

type WriteResult {
  status: String!
}